pragma solidity >=0.7.0 <0.8.0;

import "./HouseBuilder.sol";

contract HouseTransaction is HouseBuilder {
    
    uint8 commission = 10;
    
    using SafeMath for uint256;
    
    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
    
    //TODO implementer comission
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable{
        require (housesToOwner[_tokenId] == msg.sender || houses[_tokenId].onSale == true);
        ownerHousesCount[_to] = ownerHousesCount[_to].add(1);
        ownerHousesCount[msg.sender] = ownerHousesCount[msg.sender].sub(1);
        housesToOwner[_tokenId] = _to;
        emit Transfer(_from, _to, _tokenId);
    }
    
    function balanceOf(address _owner) external view returns (uint256) {
        return ownerHousesCount[_owner];
    }
    
    function ownerOf(uint256 _tokenId) external view returns (address) {
        return housesToOwner[_tokenId];
    }
    
    function setOnSale(uint _houseId, bool _onSale) external onlyOwnerOf(_houseId) {
        houses[_houseId].onSale = _onSale;
    }
    
    function withdraw() external onlyOwner {
        address payable _owner = payable(owner());
        _owner.transfer(address(this).balance);
    }
}